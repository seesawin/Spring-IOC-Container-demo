<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:c="http://www.springframework.org/schema/c"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
        
	<!-- Constructor-based dependency injection -->
	<bean id="logicService00" class="main.service.impl.LogicServiceImpl">
		<constructor-arg ref="connectDao"/>
    </bean>
    
	<bean id="logicService01" class="main.service.impl.LogicServiceImpl">
		<constructor-arg ref="connectDao"/>
		<constructor-arg type="int" value="7500000"/>
    	<constructor-arg type="java.lang.String" value="42"/>
    </bean>
    
    <bean id="logicService02" class="main.service.impl.LogicServiceImpl">
	    <constructor-arg index="0" value="7500000"/>
	    <constructor-arg index="1" value="42"/>
	    <constructor-arg index="2" ref="connectDao"/>
	</bean>
	
    <bean id="logicService03" class="main.service.impl.LogicServiceImpl">
	    <constructor-arg name="dao" ref="connectDao"/>
    	<constructor-arg name="b" value="false"/>
	</bean>
	
	<!-- constructor injection using the nested ref element -->
    <bean id="logicService04" class="main.service.impl.LogicServiceImpl">
	    <constructor-arg>
	    	<ref bean="connectDao"/>
	    </constructor-arg>
	</bean>
	
	<!-- XML shortcut with the c-namespace -->
    <bean id="logicService05" class="main.service.impl.LogicServiceImpl"
    c:dao-ref="connectDao" c:b="false" />
    
    <!-- c-namespace index declaration -->
	<bean id="logicService06" class="main.service.impl.LogicServiceImpl" 
	c:_0-ref="connectDao" c:_1="false"/>
    <!-- *********************************************************** -->
    
	<!-- Setter-based dependency injection -->
	<bean id="logicService10" class="main.service.impl.LogicServiceImpl">
		<!-- use alias -->
		<property name="connectDao" ref="dataGetter" />
    </bean>
    
	<bean id="logicService11" class="main.service.impl.LogicServiceImpl">
		<property name="connectDao">
			<ref bean="dataGetter"/>
		</property>
    </bean>
    
	<!-- The following example uses the p-namespace for even more succinct XML configuration. -->
	<bean id="logicService12" class="main.service.impl.LogicServiceImpl" 
		destroy-method="close"
		p:connectDao-ref="dataGetter" />
		
	<!-- 
		The idref element is simply an error-proof way to pass the id 
		(string value - not a reference) of another bean in the container to a <constructor-arg/> 
		or <property/> element.
	 -->	
    <bean id="logicService13" class="main.service.impl.LogicServiceImpl">
	    <property name="idref">
	        <idref bean="dataGetter" />
	    </property>
	</bean>
		
	<!-- You can also configure a java.util.Properties instance as: -->
<!-- 	<bean id="mappings" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 	    typed as a java.util.Properties -->
<!-- 	    <property name="properties"> -->
<!-- 	        <value> -->
<!-- 	            jdbc.driver.className=com.mysql.jdbc.Driver -->
<!-- 	            jdbc.url=jdbc:mysql://localhost:3306/mydb -->
<!-- 	        </value> -->
<!-- 	    </property> -->
<!-- 	</bean> -->

	<!-- Inner beans -->
    <bean id="logicService14" class="main.service.impl.LogicServiceImpl">
    	<!-- instead of using a reference to a target bean, simply define the target bean inline -->
	    <property name="connectDao">
	        <bean class="main.dao.impl.ConnectDaoImpl"> <!-- this is the inner bean -->
	            <property name="name" value="Fiona Apple"/>
	            <property name="age" value="25"/>
	        </bean>
	    </property>
	</bean>
	<!-- *********************************************************** -->

	<!-- Instantiation with a static factory method -->
	<bean id="clientService00" class="main.service.impl.ClientServiceImpl"
		factory-method="createInstance" />

	<bean id="clientService01" class="main.service.impl.ClientServiceImpl"
		factory-method="createInstance">
		<constructor-arg>
	    	<ref bean="connectDao"/>
	    </constructor-arg>
	</bean>
	<!-- *********************************************************** -->
		
	<!-- the factory bean, which contains a method called createInstance() -->
	<bean id="defaultServiceLocator" class="main.util.DefaultServiceLocator">
	</bean>
	
	<!-- the bean to be created via the factory bean -->
	<bean id="productService00"
	    factory-bean="defaultServiceLocator"
	    factory-method="createProductServiceInstance"/>
	    
	<bean id="productService01"
	    factory-bean="defaultServiceLocator"
	    factory-method="createProductServiceInstance">
	    <constructor-arg>
	    	<ref bean="connectDao"/>
	    </constructor-arg>
	</bean>
    <!-- *********************************************************** -->
    
    
    <!-- in the parent context -->
<!-- 	<bean id="accountService" class="main.service.impl.SimpleAccountServiceImpl"> -->
<!-- 	    insert dependencies as required as here -->
<!-- 	    <constructor-arg ref="connectDao"/> -->
<!-- 	</bean> -->
    
    <!-- in the child (descendant) context -->
    <!-- bean name is the same as the parent bean -->
<!-- 	<bean id="accountService00" class="org.springframework.aop.framework.ProxyFactoryBean"> -->
<!-- 	    <property name="target"> -->
<!-- 	        <ref parent="accountService"/> notice how we refer to the parent bean -->
<!-- 	    </property> -->
<!-- 	    insert other configuration and dependencies as required here -->
<!-- 	    <property name="maxLine" ref="5566" /> -->
<!-- 	</bean> -->
    <!-- *********************************************************** -->

	<!-- The following example demonstrates collection merging: -->
	<!-- parnet -->
	<bean id="moreComplexObject" abstract="true" class="main.service.impl.CollectionServiceImpl">
	    <!-- results in a setAdminEmails(java.util.Properties) call -->
	    <property name="adminEmails">
	        <props>
	            <prop key="administrator">administrator@example.org</prop>
	            <prop key="support">support@example.org</prop>
	            <prop key="development">development@example.org</prop>
	        </props>
	    </property>
	    <!-- results in a setSomeList(java.util.List) call -->
	    <property name="someList">
	        <list>
	            <value>a list element followed by a reference</value>
	            <value></value>
	            <ref bean="connectDao" />
	        </list>
	    </property>
	    <!-- results in a setSomeMap(java.util.Map) call -->
	    <property name="someMap">
	        <map>
	            <entry key="an entry" value="just some string"/>
	            <entry key ="a ref" value-ref="connectDao"/>
	        </map>
	    </property>
	    <!-- results in a setSomeSet(java.util.Set) call -->
	    <property name="someSet">
	        <set>
				<!-- Strongly-typed collection -->
	            <value>0.123</value>
	            <value>95.123</value>
	        </set>
	    </property>
	    
	    <property name="nullSet">
	       <null/>
	    </property>
	</bean>
	
	<!-- child -->
	<bean id="childComplexObject" parent="moreComplexObject">
        <property name="adminEmails">
            <!-- the merge is specified on the child collection definition -->
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>
	<!-- *********************************************************** -->
    
	<!-- Compound property names -->
<!-- 	<bean id="compound" class="main.service.impl.LogicServiceImpl"> -->
<!-- 	    <property name="connectDao.name" value="123456" /> -->
<!-- 	</bean>	 -->
    <!-- *********************************************************** -->
    
	<!-- Using depends-on -->
	<bean id="dependsOnBean" class="main.service.impl.LogicServiceImpl" depends-on="connectDao,childComplexObject">
		<constructor-arg ref="connectDao"/>
	</bean>
	<!-- *********************************************************** -->
    
	<!-- Lazy-initialized beans -->
	<!-- A lazy-initialized bean tells the IoC container to create a bean instance .
		when it is first requested, rather than at startup. -->
	<bean id="lazyBean" class="main.service.impl.LogicServiceImpl" lazy-init="true" />
	<!-- *********************************************************** -->
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
</beans>
